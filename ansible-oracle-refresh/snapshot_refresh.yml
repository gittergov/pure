---
# Oracle Database Refresh Lab – Pure Storage FlashArray
# Source: oracle2 (runs snapshot + source DB actions)
# Target: oracle1 (clone host where refresh occurs)

- name: Oracle DB Refresh Automation – FlashArray1 (Source: oracle2 → Target: oracle1)
  hosts:
    - oracle2
    - oracle1
  gather_facts: no
  vars_files:
    - group_vars/all/vault.yml

  vars:
    oracle_user: oracle
    log_dir: /tmp
    lab_script_path: /home/oracle/lab/lab1/bash

  tasks:
  ##########################################################################
  # 1️⃣ Stop Clone DB on oracle1
  ##########################################################################
  - name: Stop Clone DB using shutdown.sh
    when: inventory_hostname == "oracle1"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      cd {{ lab_script_path }}
      ./shutdown.sh
    register: stop_clone
    ignore_errors: yes

  - debug:
      var: stop_clone.stdout_lines
    when: inventory_hostname == "oracle1"

  ##########################################################################
  # 2️⃣ Insert Demo Record into Source DB on oracle2
  ##########################################################################
  - name: Insert demo record into Source DB
    when: inventory_hostname == "oracle2"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      cd {{ lab_script_path }}
      ./insert_demo_rec.sh
    register: insert_result
    ignore_errors: yes

  - debug:
      var: insert_result.stdout_lines
    when: inventory_hostname == "oracle2"

  ##########################################################################
  # 3️⃣ Dismount ASM Disk Groups for Clone DB
  ##########################################################################
  - name: Dismount ASM disk groups on oracle1
    when: inventory_hostname == "oracle1"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      cd {{ lab_script_path }}
      ./dismount_asm.sh
    register: dismount_result
    ignore_errors: yes

  - debug:
      var: dismount_result.stdout_lines
    when: inventory_hostname == "oracle1"

  ##########################################################################
  # 4️⃣ Create Pure Storage Snapshot of Source Protection Group
  ##########################################################################
  - name: Create snapshot of source protection group
    when: inventory_hostname == "oracle2"
    shell: |
      purepgroup snap {{ source_pgroup }}
    environment:
      PUREARRAY: "{{ pure_array_hostname }}"
      PURETOKEN: "{{ pure_api_token }}"
    register: snap_create
    changed_when: "'Created' in snap_create.stdout or 'created' in snap_create.stderr"
    ignore_errors: yes

  - name: Display snapshot creation output
    when: inventory_hostname == "oracle2"
    debug:
      var: snap_create.stdout_lines

  ##########################################################################
  # 5️⃣ Identify Latest Snapshot
  ##########################################################################
  - name: Get latest snapshot name
    when: inventory_hostname == "oracle2"
    shell: |
      purepgroup list --snap {{ source_pgroup }} --sort "created:-" --limit 1 --csv | tail -n 1 | cut -d, -f1
    register: latest_snapshot_name
    ignore_errors: yes

  - debug:
      msg: "Latest snapshot: {{ latest_snapshot_name.stdout.strip() }}"
    when: inventory_hostname == "oracle2"

  ##########################################################################
  # 6️⃣ Overwrite Clone Volumes from Snapshot
  ##########################################################################
  - name: Get list of clone volumes
    when: inventory_hostname == "oracle2"
    shell: |
      purepgroup list {{ clone_pgroup }} --volumes --csv | tail -n +2 | cut -d, -f1
    register: clone_volumes
    ignore_errors: yes

  - name: Display clone volumes
    when: inventory_hostname == "oracle2"
    debug:
      var: clone_volumes.stdout_lines

  - name: Overwrite clone volumes from snapshot
    when: inventory_hostname == "oracle2"
    loop: "{{ clone_volumes.stdout_lines }}"
    loop_control:
      loop_var: clone_vol
    shell: |
      echo "Overwriting {{ clone_vol }} from snapshot {{ latest_snapshot_name.stdout.strip() }}..."
      purevol overwrite --source {{ latest_snapshot_name.stdout.strip() }}.{{ clone_vol | basename }} {{ clone_vol }}
    environment:
      PUREARRAY: "{{ pure_array_hostname }}"
      PURETOKEN: "{{ pure_api_token }}"
    register: overwrite_result
    ignore_errors: yes

  - name: Show overwrite results
    when: inventory_hostname == "oracle2"
    debug:
      var: overwrite_result.results

  ##########################################################################
  # 7️⃣ Mount ASM Disk Groups and Verify Clone DB
  ##########################################################################
  - name: Mount ASM disk groups on oracle1
    when: inventory_hostname == "oracle1"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      cd {{ lab_script_path }}
      ./mount_asm.sh
    register: mount_result
    ignore_errors: yes

  - debug:
      var: mount_result.stdout_lines
    when: inventory_hostname == "oracle1"

  - name: Verify Clone DB record using show_demo_rec.sh
    when: inventory_hostname == "oracle1"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      cd {{ lab_script_path }}
      ./show_demo_rec.sh
    register: verify_result
    ignore_errors: yes

  - debug:
      var: verify_result.stdout_lines
    when: inventory_hostname == "oracle1"

  ##########################################################################
  # ✅ Done
  ##########################################################################
  - name: Refresh completed
    debug:
      msg: "Snapshot and volume overwrite completed successfully. Check show_demo_rec.sh output for verification."

