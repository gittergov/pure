---
# snapshot_refresh.yml
# Oracle Database refresh using Pure Storage FlashArray (username/password)

- name: Oracle DB Refresh Lab - FlashArray Snapshot + Verification
  hosts: all
  gather_facts: no
  vars_files:
    - group_vars/all/vault.yml

  tasks:

  ###########################################################
  # 1Ô∏è‚É£  Stop Oracle DB on clone host (oracle2)
  ###########################################################
  - name: Stop Oracle Database on clone host
    when: inventory_hostname == "oracle2"
    become: yes
    become_user: oracle
    script: files/stop_start_oracle.sh stop

  ###########################################################
  # 2Ô∏è‚É£  Insert verification record into source DB (oracle1)
  ###########################################################
  - name: Insert verification record into source database
    when: inventory_hostname == "localhost"
    delegate_to: oracle1
    become: yes
    become_user: oracle
    shell: |
      . {{ oracle_env_file }}
      sqlplus -s / as sysdba <<EOF
      create table refresh_check (check_time date);
      insert into refresh_check values (sysdate);
      commit;
      exit;
      EOF

  ###########################################################
  # 3Ô∏è‚É£  Log in to Pure array with username/password
  ###########################################################
  - name: Log in to Pure array
    when: inventory_hostname == "localhost"
    shell: |
      echo "{{ pure_password }}" | pureadmin create --username {{ pure_username }} --array {{ pure_array_hostname }}
    register: login_result
    changed_when: "'Created configuration' in login_result.stdout or 'already exists' in login_result.stdout"

  - debug:
      msg: "{{ login_result.stdout_lines }}"
    when: inventory_hostname == "localhost"

  ###########################################################
  # 4Ô∏è‚É£  Create snapshot of source protection group
  ###########################################################
  - name: Create snapshot of source protection group
    when: inventory_hostname == "localhost"
    command: purepgroup snap {{ source_pgroup }}
    register: snap_result

  - debug:
      var: snap_result.stdout_lines
    when: inventory_hostname == "localhost"

  ###########################################################
  # 5Ô∏è‚É£  Identify latest snapshot name
  ###########################################################
  - name: Get latest snapshot name
    when: inventory_hostname == "localhost"
    shell: |
      purepgroup list --snap {{ source_pgroup }} --sort "created:-" --limit 1 --csv | tail -n 1 | cut -d, -f1
    register: latest_snapshot_name

  - debug:
      msg: "Latest snapshot: {{ latest_snapshot_name.stdout.strip() }}"
    when: inventory_hostname == "localhost"

  ###########################################################
  # 6Ô∏è‚É£  Get clone volumes list
  ###########################################################
  - name: List clone volumes
    when: inventory_hostname == "localhost"
    shell: |
      purepgroup list {{ clone_pgroup }} --volumes --csv | tail -n +2 | cut -d, -f1
    register: clone_volumes

  - debug:
      var: clone_volumes.stdout_lines
    when: inventory_hostname == "localhost"

  ###########################################################
  # 7Ô∏è‚É£  Overwrite clone volumes from snapshot volumes
  ###########################################################
  - name: Overwrite each clone volume with snapshot data
    when: inventory_hostname == "localhost"
    loop: "{{ clone_volumes.stdout_lines }}"
    loop_control:
      loop_var: clone_vol
    shell: |
      purevol overwrite --source {{ latest_snapshot_name.stdout.strip() }}.{{ clone_vol | basename }} {{ clone_vol }}
    register: overwrite_result
    ignore_errors: yes

  - debug:
      var: overwrite_result.results
    when: inventory_hostname == "localhost"

  ###########################################################
  # 8Ô∏è‚É£  Start Oracle DB on clone host
  ###########################################################
  - name: Start Oracle Database on clone host
    when: inventory_hostname == "oracle2"
    become: yes
    become_user: oracle
    script: files/stop_start_oracle.sh start

  ###########################################################
  # 9Ô∏è‚É£  Verify record exists in refreshed clone database
  ###########################################################
  - name: Verify verification record exists in clone DB
    when: inventory_hostname == "localhost"
    delegate_to: oracle2
    become: yes
    become_user: oracle
    shell: |
      . {{ oracle_env_file }}
      sqlplus -s / as sysdba <<EOF
      select to_char(check_time,'YYYY-MM-DD HH24:MI:SS') from refresh_check;
      exit;
      EOF
    register: verification_result
    ignore_errors: yes

  - debug:
      var: verification_result.stdout_lines
    when: inventory_hostname == "localhost"

  ###########################################################
  # üîü  Done
  ###########################################################
  - name: Completed Oracle Refresh
    debug:
      msg: "Oracle database refresh and verification complete."

