---
- name: "Oracle DB Refresh Automation - FlashArray1 (Source: oracle2 -> Target: oracle1)"
  hosts:
    - oracle2
    - oracle1
  gather_facts: no
  vars_files:
    - group_vars/all/vault.yml

  vars:
    oracle_user: oracle
    log_file: /tmp/oracle_refresh.log

  ##########################################################################
  # 1️⃣  STOP ORACLE DATABASE ON TARGET HOST (oracle1)
  ##########################################################################
  tasks:
  - name: Stop Oracle Database on target host
    when: inventory_hostname == "oracle1"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      echo "[$(date)] Stopping Oracle..." | tee -a {{ log_file }}
      sqlplus -s / as sysdba <<EOF
      shutdown immediate;
      exit;
      EOF
    register: stop_db_result
    ignore_errors: yes

  - name: Show DB stop result
    when: inventory_hostname == "oracle1"
    debug:
      var: stop_db_result.stdout_lines

  ##########################################################################
  # 2️⃣  CREATE SNAPSHOT OF SOURCE DATABASE PROTECTION GROUP ON FLASHARRAY
  ##########################################################################
  - name: Create snapshot of source protection group
    when: inventory_hostname == "oracle2"
    shell: |
      purepgroup snap {{ source_pgroup }}
    environment:
      PUREARRAY: "{{ pure_array_hostname }}"
      PURETOKEN: "{{ pure_api_token }}"
    register: snap_create
    changed_when: "'Created' in snap_create.stdout or 'created' in snap_create.stderr"

  - name: Display snapshot creation output
    when: inventory_hostname == "oracle2"
    debug:
      var: snap_create.stdout_lines

  ##########################################################################
  # 3️⃣  GET LATEST SNAPSHOT NAME
  ##########################################################################
  - name: Get latest snapshot name
    when: inventory_hostname == "oracle2"
    shell: |
      purepgroup list --snap {{ source_pgroup }} --sort "created:-" --limit 1 --csv | tail -n 1 | cut -d, -f1
    register: latest_snapshot_name

  - name: Show latest snapshot
    when: inventory_hostname == "oracle2"
    debug:
      msg: "Latest snapshot created: {{ latest_snapshot_name.stdout.strip() }}"

  ##########################################################################
  # 4️⃣  OVERWRITE TARGET (oracle1) CLONE VOLUMES USING SNAPSHOT
  ##########################################################################
  - name: Get clone volumes from target pgroup
    when: inventory_hostname == "oracle2"
    shell: |
      purepgroup list {{ clone_pgroup }} --volumes --csv | tail -n +2 | cut -d, -f1
    register: clone_volumes

  - name: Perform overwrite for each clone volume
    when: inventory_hostname == "oracle2"
    loop: "{{ clone_volumes.stdout_lines }}"
    loop_control:
      loop_var: clone_vol
    shell: |
      echo "Overwriting {{ clone_vol }} from snapshot {{ latest_snapshot_name.stdout.strip() }}..."
      purevol overwrite --source {{ latest_snapshot_name.stdout.strip() }}.{{ clone_vol | basename }} {{ clone_vol }}
    environment:
      PUREARRAY: "{{ pure_array_hostname }}"
      PURETOKEN: "{{ pure_api_token }}"
    register: overwrite_result
    ignore_errors: yes

  - name: Display overwrite results
    when: inventory_hostname == "oracle2"
    debug:
      var: overwrite_result.results

  ##########################################################################
  # 5️⃣  START ORACLE DATABASE ON TARGET HOST (oracle1)
  ##########################################################################
  - name: Start Oracle Database on target host
    when: inventory_hostname == "oracle1"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      echo "[$(date)] Starting Oracle..." | tee -a {{ log_file }}
      sqlplus -s / as sysdba <<EOF
      startup;
      exit;
      EOF
    register: start_db_result
    ignore_errors: yes

  - name: Show DB start result
    when: inventory_hostname == "oracle1"
    debug:
      var: start_db_result.stdout_lines

  ##########################################################################
  # 6️⃣  VERIFY ORACLE DATABASE STATUS
  ##########################################################################
  - name: Verify DB open mode
    when: inventory_hostname == "oracle1"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      echo "select open_mode from v\\$database;" | sqlplus -s / as sysdba
    register: db_status

  - name: Display DB open mode
    when: inventory_hostname == "oracle1"
    debug:
      msg: "{{ db_status.stdout_lines }}"

