---
- name: Oracle Database Refresh using Pure Storage (username/password)
  hosts: all
  gather_facts: no
  vars_files:
    - group_vars/all/vault.yml

  tasks:

  # 1️⃣ Stop Oracle DB on Clone Host
  - name: Stop Oracle Database on clone host
    when: inventory_hostname == "oracle2"
    become: yes
    become_user: oracle
    script: files/stop_start_oracle.sh stop

  # 2️⃣ Log in to Pure Array (creates local CLI config)
  - name: Log in to Pure array with username/password
    when: inventory_hostname == "localhost"
    shell: |
      echo "{{ pure_password }}" | pureadmin create --username {{ pure_username }} --array {{ pure_array_hostname }}
    register: login_result
    changed_when: "'Created configuration' in login_result.stdout or 'already exists' in login_result.stdout"

  - name: Confirm Pure array login
    when: inventory_hostname == "localhost"
    debug:
      msg: "{{ login_result.stdout_lines }}"

  # 3️⃣ Create snapshot of source protection group
  - name: Create snapshot of source protection group
    when: inventory_hostname == "localhost"
    command: purepgroup snap {{ source_pgroup }}
    register: snap_result

  - name: Display snapshot creation result
    when: inventory_hostname == "localhost"
    debug:
      var: snap_result.stdout_lines

  # 4️⃣ Identify latest snapshot name
  - name: Get latest snapshot name
    when: inventory_hostname == "localhost"
    shell: |
      purepgroup list --snap {{ source_pgroup }} --sort "created:-" --limit 1 --csv | tail -n 1 | cut -d, -f1
    register: latest_snapshot_name

  - name: Show latest snapshot
    when: inventory_hostname == "localhost"
    debug:
      msg: "Latest snapshot: {{ latest_snapshot_name.stdout.strip() }}"

  # 5️⃣ Get clone volumes
  - name: List clone volumes
    when: inventory_hostname == "localhost"
    shell: |
      purepgroup list {{ clone_pgroup }} --volumes --csv | tail -n +2 | cut -d, -f1
    register: clone_volumes

  - name: Display clone volumes
    when: inventory_hostname == "localhost"
    debug:
      var: clone_volumes.stdout_lines

  # 6️⃣ Overwrite clone volumes with snapshot volumes
  - name: Perform overwrite for each clone volume
    when: inventory_hostname == "localhost"
    loop: "{{ clone_volumes.stdout_lines }}"
    loop_control:
      loop_var: clone_vol
    shell: |
      purevol overwrite --source {{ latest_snapshot_name.stdout.strip() }}.{{ clone_vol | basename }} {{ clone_vol }}
    register: overwrite_result
    ignore_errors: yes

  - name: Show overwrite results
    when: inventory_hostname == "localhost"
    debug:
      var: overwrite_result.results

  # 7️⃣ Start Oracle DB on Clone Host
  - name: Start Oracle Database on clone host
    when: inventory_hostname == "oracle2"
    become: yes
    become_user: oracle
    script: files/stop_start_oracle.sh start

  # 8️⃣ Verify Database is Open
  - name: Check Oracle DB status
    when: inventory_hostname == "oracle2"
    become: yes
    become_user: oracle
    shell: |
      . {{ oracle_env_file }}
      echo "select open_mode from v\$database;" | sqlplus -s / as sysdba
    register: db_status

  - name: Show DB status
    when: inventory_hostname == "oracle2"
    debug:
      msg: "{{ db_status.stdout_lines }}"

